S3_get_object               package:RS3                R Documentation

_D_o_w_n_l_o_a_d _a _f_i_l_e _f_r_o_m _a _b_u_c_k_e_t

_D_e_s_c_r_i_p_t_i_o_n:

     Download a file from a bucket

_U_s_a_g_e:

     S3_get_object(bucketName, key, filename = 0L)
     
_A_r_g_u_m_e_n_t_s:

bucketName: The name of the bucket where the file currently is.

     key: The location of the file for example "test/filename" is a
          file located in the folder test.

filename: The name of the location you want the file downloaded to.

_D_e_t_a_i_l_s:

     This function downloads a file from the bucket that you specify.

_V_a_l_u_e:

     Returns 1 if successful.


grid.raster                package:grid                R Documentation

_R_e_n_d_e_r _a _r_a_s_t_e_r _o_b_j_e_c_t

_D_e_s_c_r_i_p_t_i_o_n:

     Render a raster object (bitmap image) at the given location, size,
     and orientation.

_U_s_a_g_e:

     grid.raster(image,
                 x = unit(0.5, "npc"), y = unit(0.5, "npc"),
                 width = NULL, height = NULL,
                 just = "centre", hjust = NULL, vjust = NULL,
                 interpolate = TRUE, default.units = "npc",
                 name = NULL, gp = gpar(), vp = NULL)
     
     rasterGrob(image,
                x = unit(0.5, "npc"), y = unit(0.5, "npc"),
                width = NULL, height = NULL,
                just = "centre", hjust = NULL, vjust = NULL,
                interpolate = TRUE, default.units = "npc",
                name = NULL, gp = gpar(), vp = NULL)
     
_A_r_g_u_m_e_n_t_s:

   image: Any R object that can be coerced to a raster object.

       x: A numeric vector or unit object specifying x-location.

       y: A numeric vector or unit object specifying y-location.

   width: A numeric vector or unit object specifying width.

  height: A numeric vector or unit object specifying height.

    just: The justification of the rectangle relative to its (x, y)
          location.  If there are two values, the first value specifies
          horizontal justification and the second value specifies
          vertical justification.  Possible string values are:
          ‘"left"’, ‘"right"’, ‘"centre"’, ‘"center"’, ‘"bottom"’, and
          ‘"top"’.  For numeric values, 0 means left alignment and 1
          means right alignment.

   hjust: A numeric vector specifying horizontal justification.  If
          specified, overrides the ‘just’ setting.

   vjust: A numeric vector specifying vertical justification.  If
          specified, overrides the ‘just’ setting.

default.units: A string indicating the default units to use if ‘x’,
          ‘y’, ‘width’, or ‘height’ are only given as numeric vectors.

    name: A character identifier.

      gp: An object of class ‘gpar’, typically the output from a call
          to the function ‘gpar’.  This is basically a list of
          graphical parameter settings.

      vp: A Grid viewport object (or NULL).

interpolate: A logical value indicating whether to linearly interpolate
          the image (the alternative is to use nearest-neighbour
          interpolation, which gives a more blocky result).

_D_e_t_a_i_l_s:

     Neither ‘width’ nor ‘height’ needs to be specified, in which case,
     the aspect ratio of the image is preserved.  If both ‘width’ and
     ‘height’ are specified, it is likely that the image will be
     distorted.

     Not all graphics devices are capable of rendering raster images
     and some may not be able to produce rotated images (i.e., if a
     raster object is rendered within a rotated viewport).  See also
     the comments under ‘rasterImage’.

     All graphical parameter settings in ‘gp’ will be ignored,
     including ‘alpha’.

_V_a_l_u_e:

     A rastergrob grob.

_A_u_t_h_o_r(_s):

     Paul Murrell

_S_e_e _A_l_s_o:

     ‘as.raster’.

     ‘dev.capabilities’ to see if it is supported.

_E_x_a_m_p_l_e_s:

     redGradient <- matrix(hcl(0, 80, seq(50, 80, 10)),
                           nrow=4, ncol=5)
     # interpolated
     grid.newpage()
     grid.raster(redGradient)
     # blocky
     grid.newpage()
     grid.raster(redGradient, interpolate=FALSE)
     # blocky and stretched
     grid.newpage()
     grid.raster(redGradient, interpolate=FALSE, height=unit(1, "npc"))
     
     # The same raster drawn several times
     grid.newpage()
     grid.raster(0, x=1:3/4, y=1:3/4, w=.1, interp=FALSE)
     

arrangeGrob             package:gridExtra              R Documentation

_A_r_r_a_n_g_e _m_u_l_t_i_p_l_e _g_r_o_b_s _o_n _a _p_a_g_e

_D_e_s_c_r_i_p_t_i_o_n:

     Set up a gtable layout to place multiple grobs on a page.

_U_s_a_g_e:

     arrangeGrob(..., grobs = list(...), layout_matrix, vp = NULL,
       name = "arrange", as.table = TRUE, respect = FALSE, clip = "off",
       nrow = NULL, ncol = NULL, widths = NULL, heights = NULL, top = NULL,
       bottom = NULL, left = NULL, right = NULL, padding = unit(0.5, "line"))
     
     grid.arrange(..., newpage = TRUE)
     
     marrangeGrob(grobs, ncol, nrow, ..., top = quote(paste("page", g, "of",
       pages)))
     
_A_r_g_u_m_e_n_t_s:

     ...: grobs, gtables, ggplot or trellis objects

   grobs: list of grobs

layout_matrix: optional layout

      vp: viewport

    name: argument of gtable

as.table: logical: bottom-left to top-right (TRUE) or top-left to
          bottom-right (FALSE)

 respect: argument of gtable

    clip: argument of gtable

    nrow: argument of gtable

    ncol: argument of gtable

  widths: argument of gtable

 heights: argument of gtable

     top: optional string, or grob

  bottom: optional string, or grob

    left: optional string, or grob

   right: optional string, or grob

 padding: unit of length one, margin around annotations

 newpage: open a new page

_D_e_t_a_i_l_s:

     Using marrangeGrob, if the layout specifies both nrow and ncol,
     the list of grobs can be split into multiple pages. On interactive
     devices print opens new windows, whilst non-interactive devices
     such as pdf call grid.newpage() between the drawings.

_V_a_l_u_e:

     arrangeGrob returns a gtable.

     marrangeGrob returns a list of class arrangelist

_F_u_n_c_t_i_o_n_s:

        • ‘arrangeGrob’: return a grob without drawing

        • ‘grid.arrange’: draw on the current device

        • ‘marrangeGrob’: interface to arrangeGrob that can dispatch on
          multiple pages

_E_x_a_m_p_l_e_s:

     library(grid)
     grid.arrange(rectGrob(), rectGrob())
     ## Not run:
     
     library(ggplot2)
     pl <- lapply(1:11, function(.x) qplot(1:10, rnorm(10), main=paste("plot", .x)))
     ml <- marrangeGrob(pl, nrow=2, ncol=2)
     ## non-interactive use, multipage pdf
     ggsave("multipage.pdf", ml)
     ## interactive use; open new devices
     ml
     ## End(Not run)
     

